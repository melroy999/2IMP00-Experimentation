interface {{_c.name}}_{{model.name}}Thread_States {
    enum States {
        {{model.states | comma_separated_list}}
    }
}

class {{model.name}}Thread extends Thread implements {{_c.name}}_{{model.name}}Thread_States {
    // Current state
    private {{model.name}}Thread.States currentState;

    // Random number generator to handle non-determinism
    private final Random random;
    {% if add_counter %}

    // Counter of main while-loop iterations
    long transitionCounter;

    // Counter for successful iterations
    long successful_transitionCounter;

    {% endif %}
    {% if add_performance_counter %}
    // A counter for the transitions.
    private HashMap<String, Integer> transitionCounterMap;

    {% endif %}
    {% if model.variables | length > 0 %}
    // Thread local variables
    {% for v in model.variables %}
    private {{v.type | get_java_type(False)}} {{v.name}};
    {% endfor %}

    {% endif %}
    // The lock manager.
    private final LockManager lockManager;

    // Constructor
    {{model.name}}Thread (LockManager lockManager) {
        random = new Random();
        this.lockManager = lockManager;
        {% if add_counter %}
        transitionCounter = 0;
        {% endif %}
        {% if add_performance_counter %}
        transitionCounterMap = new HashMap<>();
        {% endif %}
        currentState = {{model.name}}Thread.States.{{model.initialstate}};
        {% for v in model.variables %}
        {{v.name}} = {% if v.type.size > 1 %}new {{v.type | get_java_type(False)}} {% endif %}{{v | get_default_variable_value}};
        {% endfor %}
    }

    {# Separate execution methods for each state. #}
    {% for s in model.states %}
    private boolean exec_{{s}}() {
        {% for statement in model.adjacency_list[s] %}
        {% if statement.is_trivially_unsatisfiable %}
        // {{statement.comment_string}}
        {% endif %}
        {% endfor %}
        {% if model.groupings[s] %}
        {{model.groupings[s] | get_decision_structure(model) | indent(8, False)}}
        {% endif %}
        {% if model.groupings[s] == none %}
        // There are no transitions to be made.
        return false;
        {% endif %}
    }

    {% endfor %}
    // Execute method
    private void exec() {
        {% if add_performance_counter %}
        boolean result;
        {% endif %}
        {% if add_performance_counter %}
        Instant start = Instant.now();
        {% endif %}
        {% if add_counter %}
        while(transitionCounter < COUNTER_BOUND) {
        {% else %}
        while(true) {
        {% endif %}
            {% if currentState | length > 0 %}
            switch(currentState) {
                {% for s in model.states %}
                case {{s}}:
                    {% if add_counter %}
                    result = exec_{{s}}();
                    {% else %}
                    exec_{{s}}();
                    {% endif %}
                    break;
                {% endfor %}
                default:
                    return;
            }
            {% else %}
            {% if add_counter %}
            result = exec_{{model.states[0]}}();
            {% else %}
            exec_{{model.states[0]}}();
            {% endif %}
            {% endif %}
            {% if add_counter %}

            // Increment counter
            transitionCounter++;
            {% if add_performance_counter %}
            if(result) {
                successful_transitionCounter++;
            }
            {% endif %}
        }
        {% if add_performance_counter %}
        System.out.println("{{_c.name}}.{{model.name}}: " + successful_transitionCounter + "/" + transitionCounter + " (successful/total transitions)");
        Instant finish = Instant.now();
        System.out.println("Thread {{_c.name}}.{{model.name}} finished after " + Duration.between(start, finish).toMillis() + " milliseconds.");
        System.out.println("Transition count:");
        transitionCounterMap.forEach((key, value) -> System.out.println(key + ", " + value));
        System.out.println();
        {% endif %}
        {% endif %}
    }

    // Run method
    public void run() {
        exec();
    }
}