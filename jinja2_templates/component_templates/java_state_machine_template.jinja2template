interface {{_c.name}}_{{model.name}}Thread_States {
    enum States {
        {{model.states | comma_separated_list}}
    }
}

class {{model.name}}Thread extends Thread implements {{_c.name}}_{{model.name}}Thread_States {
    private Thread t;

    // Current state
    private {{model.name}}Thread.States currentState;

    // Random number generator to handle non-determinism
    private final Random random;
    {% if add_counter %}

    // Counter of main while-loop iterations
    long transition_counter;
    {% endif %}
    {% if model.variables | length > 0 %}

    // Thread local variables
    {% for v in model.variables %}
    private {{v.type | get_java_type(False)}} {{v.name}};
    {% endfor %}

    {% endif %}
    // The lock manager.
    private final LockManager lockManager;

    // Constructor
    {{model.name}}Thread (LockManager lockManager) {
        random = new Random();
        this.lockManager = lockManager;
        {% if add_counter %}
        transition_counter = 0;
        {% endif %}
        currentState = {{model.name}}Thread.States.{{model.initialstate}};
        {% for v in model.variables %}
        {{v.name}} = {% if v.type.size > 1 %}new {{v.type | get_java_type(False)}} {% endif %}{{v | get_default_variable_value}};
        {% endfor %}
    }

    {# Separate execution methods for each state. #}
    {% for s in model.states %}
    private boolean exec_{{s}}() {
        {% if model.groupings[s] %}
        //model.groupings[s] | get_choice_structure(add_counter, model) | indent(8, False)
        {{model.groupings[s] | get_decision_structure(model, _c) | indent(8, False)}}
        {% endif %}
        {% if model.groupings[s] == none %}
        // There are no transitions to be made, implying a successful self-loop.
        return true;
        {% endif %}
        {% if model.groupings[s][1] | length > 1 %}
        return false;
        {% endif %}
    }

    {% endfor %}
    // Execute method
    private void exec() {
        {% if add_counter %}
        boolean result;
        {% endif %}
        {% if add_counter %}
        while(transition_counter < COUNTER_BOUND) {
        {% else %}
        while(true) {
        {% endif %}
            switch(currentState) {
                {% for s in model.states %}
                case {{s}}:
                    {% if add_counter %}
                    result = exec_{{s}}();
                    {% else %}
                    exec_{{s}}();
                    {% endif %}
                    break;
                {% endfor %}
                default:
                    return;
            }
            {% if add_counter %}

            // Increment counter
            if(result) {
                transition_counter++;
            }
            {% endif %}
        }
    }

    // Run method
    public void run() {
        exec();
    }

    // Start method
    public void start() {
        if (t == null) {
            t = new Thread(this, "{{model.name}}Thread");
            t.start();
        }
    }
}