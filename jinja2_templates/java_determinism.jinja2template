import java.util.Random;
import java.util.concurrent.locks.ReentrantLock;
import java.util.Arrays;

// main class
public class {{model.name}} {
    // The threads
    {% for c in model.classes %}
    {% for sm in c.statemachines %}
    Java_{{sm.name}}Thread java_T_{{sm.name}};
    {% endfor %}
    {% endfor %}
    {% if add_counter %}

    // Upperbound for transition counter
    public static final long java_COUNTER_BOUND = 300000000L;
    {% endif %}

    // Global variables
    {% for c in model.classes %}
    {% for v in c.variables %}
    public volatile {{v.type | get_java_type(False)}} {{v.name}};
    {% endfor %}
    {% endfor %}

	{% for o in model.objects %}
	{% set c = o.type %}
	{% for sm in c.statemachines %}
	interface Java_{{sm.name}}Thread_States {
	    // Enum type for state machine states
        enum States {
            {{sm.states | comma_separated_list}}
        }
	}

	class Java_{{sm.name}}Thread extends Thread implements Java_{{sm.name}}Thread_States {
        private Thread java_t;
        private String java_threadName = "{{sm.name}}Thread";

        // Current state
        private Java_{{sm.name}}Thread.States java_currentState;

        // Random number generator to handle non-determinism
        private Random java_randomGenerator;
        {% if add_counter %}

        // Counter of main while-loop iterations
        long java_transcounter;
        {% endif %}

        // Thread local variables
        {% for v in sm.variables %}
        private {{v.type | get_java_type(False)}} {{v.name}};
        {% endfor %}

		// Constructor
		Java_{{sm.name}}Thread () {
			java_randomGenerator = new Random();
			{% if add_counter %}
			java_transcounter = 0;
			{% endif %}
			java_currentState = Java_{{sm.name}}Thread.States.{{sm.initialstate}};
			{% for v in sm.variables %}
			{{v.name}} = {% if v.type.size > 1 %}new {{v.type | get_java_type(False)}} {% endif %}{{v | get_default_variable_value}};
			{% endfor %}
		}

		{# Separate execution methods for each state. #}
        {% for s in sm.states %}
        private boolean exec_{{s}}() {
			// variable to store non-deterministic choices
			{% if sm.groupings[s] %}
			int java_choice;
			{{sm.groupings[s] | get_choice_structure(add_counter, sm) | indent(12, False) }}
			{% endif %}
			return false;
        }

        {% endfor %}
		// Execute method
		private void exec() {
		    boolean result;

			{% if add_counter %}
			while(java_transcounter < java_COUNTER_BOUND) {
			{% else %}
			while(true) {
			{% endif %}
			    switch(java_currentState) {
                    {% for s in sm.states %}
                    case {{s}}:
                        result = exec_{{s}}();
                        break;
                    {% endfor %}
			    }
			}
		}

		// Run method
		public void run() {
			exec();
		}

		// Start method
		public void start() {
			if (java_t == null) {
				java_t = new Thread(this);
				java_t.start();
			}
		}
	}

	{% endfor %}
	// Constructor for main class
	{{model.name}}() {
		// Instantiate global variables
		{% for v in c.variables %}
		{{v.name}} = {% if v.type.size > 1 %}new {{v.type | get_java_type(False)}} {% endif %}{{v | get_default_variable_value}};
		{% endfor %}
	}

	// Start all threads
	private void startThreads() {
		{% for sm in c.statemachines %}
		java_T_{{sm.name}}.start();
		{% endfor %}
	}

	// Join all threads
	private void joinThreads() {
		while (true) {
			try {
				{% for sm in c.statemachines %}
				java_T_{{sm.name}}.join();
				{% endfor %}
				break;
			} catch (InterruptedException e) {
				e.printStackTrace();
			}
		}
	}

	// Run application
	public static void main(String[] args) {
        {{model.name}} java_ap = new {{model.name}}();
        java_ap.startThreads();
        java_ap.joinThreads();
	}
	{% endfor %}
}
