// representation of a class
private static class {{model.name}} implements SLCO_Class {
    {% if model.statemachines | length > 0 %}
    // The threads
    {% for sm in model.statemachines %}
    private Java_{{sm.name}}Thread java_T_{{sm.name}};
    {% endfor %}

    {% endif %}
    {% if model.variables | length > 0 %}
    // Global variables
    {% for v in model.variables %}
    private volatile {{v.type | get_java_type(False)}} {{v.name}};
    {% endfor %}

    {% endif %}
    {% for sm in model.statemachines %}
    {{sm | render_state_machine(add_counter, model.name) | indent(4, False)}}

    {% endfor %}
    // Constructor for main class
    {{model.name}}({{model.variables | get_variable_list}}) {
        // Instantiate global variables
        {% for v in model.variables %}
        this.{{v.name}} = {{v.name}};
        {% endfor %}
        {% for sm in model.statemachines %}
        java_T_{{sm.name}} = new {{model.name}}.Java_{{sm.name}}Thread();
        {% endfor %}
    }

    // Start all threads
    public void startThreads() {
        {% for sm in model.statemachines %}
        java_T_{{sm.name}}.start();
        {% endfor %}
    }

    // Join all threads
    public void joinThreads() {
        while (true) {
            try {
                {% for sm in model.statemachines %}
                java_T_{{sm.name}}.join();
                {% endfor %}
                break;
            } catch (InterruptedException e) {
                e.printStackTrace();
            }
        }
    }
}